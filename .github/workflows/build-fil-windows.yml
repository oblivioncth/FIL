name: Build FIL - Windows
on:
  workflow_call:
    secrets:
      qt_ffynnon_cred:
        description: 'Credentials for getting Qt from Ffynnon'
        required: true
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  fil_src_suffix: FIL/Source
  fil_src_dir: ${{ github.workspace }}/FIL/Source
  fil_build_dir: ${{ github.workspace }}/FIL/Build

jobs:
  build-fil:
    name: Build FIL - Windows (Release)
    strategy:
      matrix:
        qt_linkage: [static]
    runs-on: windows-latest
    env:
      vs_dir: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
      cmake_gen: Ninja Multi-Config
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "fil_package_path=${{ env.fil_build_dir }}/out/dist" >> $Env:GITHUB_ENV
        $fil_install_path="${{ env.fil_build_dir }}/out/install"
        echo "fil_install_path=$fil_install_path" >> $Env:GITHUB_ENV
        echo "qt_cmake=${Env:qt_install_dir}/bin/qt-cmake.bat" >> $Env:GITHUB_ENV
    - name: Install Qt (custom build)
      uses: oblivioncth/actions/general/install-and-cache-qt-from-ffynnon@dev
      with:
        version: 6.4.0
        os: win32
        compiler: msvc
        linkage: ${{ matrix.qt_linkage }}
        path: ${{ env.qt_install_dir }}
        credentials: ${{ secrets.qt_ffynnon_cred }}
    - name: Checkout FIL
      uses: actions/checkout@v3
      with:
        path: ${{ env.fil_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install FIL
      working-directory: ${{ env.fil_src_dir }}
      shell: cmd
      run: |
        echo "Setup C++ Build Environment..."
        CALL "${{ env.vs_dir }}\Common7\Tools\VsDevCmd.bat" -arch=amd64
        echo "Configure CMake using Qt wrapper..."
        CALL "${{ env.qt_cmake }}" -G "${{ env.cmake_gen }}" -S "${{ env.fil_src_dir}}" -B "${{ env.fil_build_dir }}"  
        echo "Changing to build directory..."
        cd "%fil_build_dir%"
        echo "Building FIL release..."
        cmake --build . --target all --config Release
        echo "Installing FIL Release..."
        cmake --build . --target install --config Release
        echo "Packaging FIL..."
        cpack -C "Release"
        echo "Build complete."
    - name: Get FIL artifact name
      id: get_artifact_name
      run: |
        $artifact_name=$((Get-ChildItem -Path "${{ env.fil_package_path }}" -Filter *.zip)[0].BaseName)
        echo "current_artifact_name=$artifact_name" >> $Env:GITHUB_ENV
    - name: Upload FIL build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.current_artifact_name }}
        path: ${{ env.fil_install_path }}
        if-no-files-found: error
