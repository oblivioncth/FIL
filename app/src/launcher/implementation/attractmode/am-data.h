#ifndef ATTRACTMODE_DATA_H
#define ATTRACTMODE_DATA_H

// Qx Includes
#include <qx/io/qx-textstreamreader.h>
#include <qx/io/qx-textstreamwriter.h>

// libfp Includes
#include <fp/fp-install.h>

// Project Includes
#include "launcher/abstract/lr-data.h"
#include "launcher/implementation/attractmode/am-registration.h"
#include "launcher/implementation/attractmode/am-items.h"

namespace Am
{

template<class DocT>
class CommonDocReader : public Lr::DataDocReader<DocT>
{
protected:
    using Lr::DataDocReader<DocT>::target;
//-Instance Variables--------------------------------------------------------------------------------------------------
protected:
    Qx::TextStreamReader mStreamReader;

//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    CommonDocReader(DocT* targetDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
protected:
    bool lineIsComment(const QString& line);
    QString readLineIgnoringComments(qint64 maxlen = 0);
    virtual bool checkDocValidity(bool& isValid) = 0;
    virtual Lr::DocHandlingError readTargetDoc() = 0;

public:
    Lr::DocHandlingError readInto() override;
};

template<class DocT>
class CommonDocWriter : public Lr::DataDocWriter<DocT>
{
protected:
    using Lr::DataDocWriter<DocT>::source;
//-Instance Variables--------------------------------------------------------------------------------------------------
protected:
    Qx::TextStreamWriter mStreamWriter;

//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    CommonDocWriter(DocT* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
protected:
    virtual bool writeSourceDoc() = 0;

public:
    Lr::DocHandlingError writeOutOf() override;
};

class ConfigDoc : public Lr::DataDoc<LauncherId>
{
//-Inner Classes----------------------------------------------------------------------------------------------------
public:
    template<class DocT>
    class Reader;

    template<class DocT>
    class Writer;

//-Class Variables--------------------------------------------------------------------------------------------------
public:
    static inline const QString TAGLINE = u"# Generated by Attract-Mode v"_s;

//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    ConfigDoc(Install* install, const QString& filePath, QString docName);

//-Instance Functions--------------------------------------------------------------------------------------------------
protected:
    QString versionedTagline();
};


template<class DocT>
class ConfigDoc::Reader : public CommonDocReader<DocT>
{
protected:
    using CommonDocReader<DocT>::mStreamReader;
    using CommonDocReader<DocT>::lineIsComment;
    using Lr::DataDocReader<DocT>::target;
//-Class Variables----------------------------------------------------------------------------------------------------
protected:
    static inline const QRegularExpression KEY_VALUE_REGEX =
            QRegularExpression(uR"((?<key>\w+)(?!\S)[^\S\r\n]*(?<value>(?:\S+(?:[^\S\r\n]+\S+)*)*))"_s);

//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    Reader(DocT* targetDoc);

//-Class Functions-------------------------------------------------------------------------------------------------
protected:
    bool splitKeyValue(const QString& line, QString& key, QString& value);

//-Instance Functions-------------------------------------------------------------------------------------------------
protected:
    bool checkDocValidity(bool& isValid) override;
};

template<class DocT>
class ConfigDoc::Writer : public CommonDocWriter<DocT>
{
protected:
    using CommonDocWriter<DocT>::mStreamWriter;
    using Lr::DataDocWriter<DocT>::source;
//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    Writer(DocT* targetDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
protected:
    virtual bool writeConfigDoc() = 0;
    bool writeSourceDoc() override;
};

class Taglist : public Lr::DataDoc<LauncherId>
{
//-Inner Classes----------------------------------------------------------------------------------------------------
public:
    class Writer;

//-Instance Variables--------------------------------------------------------------------------------------------------
protected:
    QStringList mTags;

//-Constructor--------------------------------------------------------------------------------------------------------
protected:
    Taglist(Install* install, const QString& listPath, QString docName);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    bool isEmpty() const override;

    bool containsTag(QStringView tag) const;
    void appendTag(const QString& tag);
};

class Taglist::Writer : public CommonDocWriter<Taglist>
{
//-Constructor--------------------------------------------------------------------------------------------------------
public:
    Writer(Taglist* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    bool writeSourceDoc() override;
};

class PlatformTaglist : public Taglist
{
    friend class PlatformInterface;
//-Constructor--------------------------------------------------------------------------------------------------------
private:
    PlatformTaglist(Install* install, const QString& listPath, QString docName);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    Type type() const override;
};

class PlaylistTaglist : public Taglist
{
    friend class PlaylistInterface;
//-Constructor--------------------------------------------------------------------------------------------------------
private:
    PlaylistTaglist(Install* install, const QString& listPath, QString docName);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    Type type() const override;
};

class Romlist : public Lr::UpdatableDoc<LauncherId>
{
    /* This class looks like it should inherit PlatformDoc, but it isn't truly one in the context of an Am install
     * since those are represented by tag lists, and if it did there would be the issue that once modified it would
     * be added into the modified platforms list, which isn't accurate given said context. It's more of a config
     * doc since its usage is internal to Am::Install
     */

//-Inner Classes----------------------------------------------------------------------------------------------------
public:
    class Reader;
    class Writer;

//-Class Variables----------------------------------------------------------------------------------------------------
private:
    static inline const QString HEADER = u"#Name;Title;Emulator;CloneOf;Year;Manufacturer;Category;Players;Rotation;Control;Status;"_s
                                         u"DisplayCount;DisplayType;AltRomname;AltTitle;Extra;Buttons;Series;Language;Region;Rating"_s;

//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    UpdatableContainer<RomEntry> mEntries;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    explicit Romlist(Install* install, const QString& listPath, QString docName, const Import::UpdateOptions& updateOptions);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    IDataDoc::Type type() const override;
    bool isEmpty() const override;

    bool containsGame(const QUuid& gameId) const;
    bool containsAddApp(const QUuid& addAppId) const;

    const RomEntry* processSet(const Fp::Set& set);
};

class Romlist::Reader : public CommonDocReader<Romlist>
{
//-Constructor--------------------------------------------------------------------------------------------------------
public:
    Reader(Romlist* targetDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    bool checkDocValidity(bool& isValid) override;
    Lr::DocHandlingError readTargetDoc() override;
    void parseRomEntry(const QString& rawEntry);
    void addFieldToBuilder(RomEntry::Builder& builder, QString field, quint8 index);
};

class Romlist::Writer : public CommonDocWriter<Romlist>
{
//-Constructor--------------------------------------------------------------------------------------------------------
public:
    Writer(Romlist* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    bool writeSourceDoc() override;
    bool writeRomEntry(const RomEntry& romEntry);
    void writeEntryField(const QString& entryField, bool writeSeperator = true);
};

class BulkOverviewWriter
{
//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    QDir mOverviewDir;
    QSaveFile mFile;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    BulkOverviewWriter(const QDir& overviewDir);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    QString currentFilePath();
    QString fileErrorString();
    bool writeOverview(const Overview& overview);
};

class PlatformInterface : public Lr::PlatformDoc<LauncherId>
{
    friend class PlatformInterfaceWriter;
//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    PlatformTaglist mPlatformTaglist;
    QList<Overview> mOverviews;
    QDir mOverviewDir;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    explicit PlatformInterface(Install* install, const QString& platformTaglistPath, QString platformName,
                               const QDir& overviewDir);

//-Instance Functions--------------------------------------------------------------------------------------------------
private:
    const RomEntry* processSet(const Fp::Set& set) override;

public:
    bool isEmpty() const override;

    bool containsGame(const QUuid& gameId) const override;
    bool containsAddApp(const QUuid& addAppId) const override;
};

class PlatformInterfaceWriter : public Lr::DataDocWriter<PlatformInterface>
{
//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    Taglist::Writer mTaglistWriter;
    BulkOverviewWriter mOverviewWriter;
    /* NOTE: Would just use Qx::writeStringToFile() but that is slower due to lots of checks/error handling, whereas
     * this needs to be as fast as possible
     */

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    PlatformInterfaceWriter(PlatformInterface* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
public:
    Lr::DocHandlingError writeOutOf() override;
};

class PlaylistInterface : public Lr::PlaylistDoc<LauncherId>
{
    friend class PlaylistInterfaceWriter;
//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    PlaylistTaglist mPlaylistTaglist;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    explicit PlaylistInterface(Install* install, const QString& playlistTaglistPath, QString playlistName);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    bool isEmpty() const override;

    bool containsPlaylistGame(const QUuid& gameId) const override;

    void setPlaylistData(const Fp::Playlist& playlist) override;
};

class PlaylistInterfaceWriter : public Lr::DataDocWriter<PlaylistInterface>
{
//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    Taglist::Writer mTaglistWriter;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    PlaylistInterfaceWriter(PlaylistInterface* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    Lr::DocHandlingError writeOutOf() override;
};

class Emulator : public ConfigDoc
{
//-Inner Classes----------------------------------------------------------------------------------------------------
public:
    class Reader;
    class Writer;

//-Inner Classes-------------------------------------------------------------------------------------------------------
public:
    class Keys
    {
    public:
        static inline const QString EXECUTABLE = u"executable"_s;
        static inline const QString ARGS = u"args"_s;
        static inline const QString WORK_DIR = u"workdir"_s;
        static inline const QString ROM_PATH = u"rompath"_s;
        static inline const QString ROM_EXT = u"romext"_s;
        static inline const QString SYSTEM = u"system"_s;
        static inline const QString INFO_SOURCE = u"info_source"_s;
        static inline const QString EXIT_HOTKEY = u"exit_hotkey"_s;

        static inline const QString ARTWORK = u"artwork"_s;
        class Artwork
        {
        public:
            static inline const QString FLYER = u"flyer"_s;
            static inline const QString MARQUEE = u"marquee"_s;
            static inline const QString SNAP = u"snap"_s;
            static inline const QString WHEEL = u"wheel"_s;
        };
    };

//-Class Variables-----------------------------------------------------------------------------------------------------
public:
    static inline const QString STD_NAME = Fp::NAME;

//-Instance Variables--------------------------------------------------------------------------------------------------
private:
    QString mExecutable;
    QString mArgs;
    QString mWorkDir;
    QString mRomPath;
    QString mRomExt;
    QString mSystem;
    QString mInfoSource;
    QString mExitHotkey;
    QHash<QString, EmulatorArtworkEntry> mArtworkEntries;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    explicit Emulator(Install * const install, const QString& filePath);

//-Instance Functions--------------------------------------------------------------------------------------------------
public:
    bool isEmpty() const override;
    Type type() const override;

    QString executable() const;
    QString args() const;
    QString workDir() const;
    QString romPath() const;
    QString romExt() const;
    QString system() const;
    QString infoSource() const;
    QString exitHotkey() const;
    EmulatorArtworkEntry artworkEntry(const QString& type) const;
    QList<EmulatorArtworkEntry> artworkEntries() const;

    void setExecutable(const QString& executable);
    void setArgs(const QString& args);
    void setWorkDir(const QString& workDir);
    void setRomPath(const QString& romPath);
    void setRomExt(const QString& romExt);
    void setSystem(const QString& system);
    void setInfoSource(const QString& infoSource);
    void setExitHotkey(const QString& exitHotkey);
    void setArtworkEntry(const EmulatorArtworkEntry& entry);
};

class EmulatorReader : public ConfigDoc::Reader<Emulator>
{
//-Constructor--------------------------------------------------------------------------------------------------------
public:
    EmulatorReader(Emulator* targetDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    Lr::DocHandlingError readTargetDoc() override;
    void parseKeyValue(const QString& key, const QString& value);
    void parseExecutable(const QString& value);
    void parseArgs(const QString& value);
    void parseWorkDir(const QString& value);
    void parseRomPath(const QString& value);
    void parseRomExt(const QString& value);
    void parseSystem(const QString& value);
    void parseInfoSource(const QString& value);
    void parseExitHotkey(const QString& value);
    void parseArtwork(const QString& value);
};

class Emulator::Writer : public ConfigDoc::Writer<Emulator>
{
//-Class Values-------------------------------------------------------------------------------------------------------
private:
    static const int STD_KEY_FIELD_WIDTH = 21;
    static const int ARTWORK_KEY_FIELD_WIDTH = 11;
    static const int ARTWORK_TYPE_FIELD_WIDTH = 16;

//-Constructor--------------------------------------------------------------------------------------------------------
public:
    Writer(Emulator* sourceDoc);

//-Instance Functions-------------------------------------------------------------------------------------------------
private:
    bool writeConfigDoc() override;
    void writeStandardKeyValue(const QString& key, const QString& value);
    void writeArtworkEntry(const EmulatorArtworkEntry& entry);
};

}

#include "am-data.tpp"
#endif // ATTRACTMODE_DATA_H
